package emergenceshelter.management.user;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Scanner;

public abstract class Supervisor extends Staff {

    public Supervisor(String firstName, String lastName, String email, boolean isVerified, String password) {
        super(firstName, lastName, email, isVerified, password);
    }

    public static List<Staff> getAllMembers() {
        try {
            List<List<String>> membersList = rw.readCSV(Staff.filePath);
            List<Staff> members = new ArrayList<>();

            for (List<String> member : membersList) {
                members.add(
                    new Supervisor(
                        member.get(1),
                        member.get(2),
                        member.get(3),
                        Boolean.parseBoolean(member.get(4)),
                        member.get(5)
                    )
                );
            }

            return members;

        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public void actionMenu(Scanner scanner, HashMap<String, String> colors) {
        while (true) {
            StaffMenu choice = printActionMenu(scanner);
            switch (choice) {
                case VIEW_ASSIGNED_RESIDENTS:
                    viewAssignedResidents(colors);
                    break;
                case ASSIGN_RESIDENT_TO_CASEWORKER:
                    assignResidentToCaseWorker(scanner, colors);
                    break;
                case ADD_NEW_RESIDENT:
                    addNewResident(scanner, colors);
                    break;
                case BACK:
                    return;
                case EXIT:
                    System.out.println(colors.get("RED") + "Exiting the system." + colors.get("RESET"));
                    System.exit(0);
                default:
                    System.out.println(colors.get("RED") + "Invalid choice, please try again." + colors.get("RESET"));
                    break;
            }
        }
    }

    private StaffMenu printActionMenu(Scanner scanner) {
        System.out.println("\n==========================");
        System.out.println("     Supervisor Actions      ");
        System.out.println("==========================");
        System.out.println("1. Assign Resident to Case Worker");
        System.out.println("2. View Assigned Residents");
        System.out.println("3. Add New Resident");
        System.out.println("4. Back");
        System.out.println("5. Exit");
        System.out.println("==========================");
        System.out.print("Please choose an option: ");

        int input = scanner.nextInt();
        scanner.nextLine();

        return switch (input) {
            case 1 -> StaffMenu.ASSIGN_RESIDENT_TO_CASEWORKER;
            case 2 -> StaffMenu.VIEW_ASSIGNED_RESIDENTS;
            case 3 -> StaffMenu.ADD_NEW_RESIDENT;
            case 4 -> StaffMenu.BACK;
            case 5 -> StaffMenu.EXIT;
            default -> StaffMenu.NONE;
        };
    }

    public void addNewResident(Scanner scanner, HashMap<String, String> colors) {
        System.out.print("Enter Resident's First Name: ");
        String firstName = scanner.nextLine();

        System.out.print("Enter Resident's Last Name: ");
        String lastName = scanner.nextLine();

        System.out.print("Enter Resident's Email: ");
        String email = scanner.nextLine();

        System.out.print("Enter Resident's Phone Number: ");
        String phoneNumber = scanner.nextLine();

        System.out.print("Enter Resident's Health Status: ");
        String healthStatus = scanner.nextLine();

        String assignedTo = "None";

        Resident newResident = new Resident(firstName, lastName, email, phoneNumber, healthStatus, assignedTo);

        List<String> residentData = newResident.toList();

        try {
            Resident.rw.appendToCSV("./file/residents.csv", residentData);
            System.out.println(colors.get("GREEN") + "New resident added successfully." + colors.get("RESET"));
        } catch (IOException e) {
            System.out.println(colors.get("RED") + "Error adding new resident to file." + colors.get("RESET"));
            e.printStackTrace();
        }
    }

    public void assignResidentToCaseWorker(Scanner scanner, HashMap<String, String> colors) {
        Resident selectedResident = selectResident(scanner, colors);

        if (selectedResident == null) {
            System.out.println(colors.get("RED") + "Invalid resident selection." + colors.get("RESET"));
            return;
        }

        CaseWorker selectedCaseworker = selectCaseWorker(scanner, colors);

        if (selectedCaseworker == null) {
            System.out.println(colors.get("RED") + "Invalid caseworker selection." + colors.get("RESET"));
            return;
        }

        Resident.updateAssignedCaseworker(selectedResident.getEmail(), selectedCaseworker.getEmail(), colors);
        System.out.println(colors.get("GREEN") + "Resident " + selectedResident.getFirstName() + " assigned to Case Worker " + selectedCaseworker.getFirstName() + colors.get("RESET"));
    }

    private Resident selectResident(Scanner scanner, HashMap<String, String> colors) {
        List<Resident> residents = Resident.loadResidents(colors);
        System.out.println("\nAvailable Residents:");
        System.out.println(Resident.getHeader(colors));

        for (int i = 0; i < residents.size(); i++) {
            System.out.printf("%d. %s", (i + 1), residents.get(i));
        }

        System.out.print("\nSelect a resident by number: ");
        int residentChoice = scanner.nextInt();
        scanner.nextLine();

        if (residentChoice < 1 || residentChoice > residents.size()) {
            return null;
        }

        return residents.get(residentChoice - 1);
    }

    private CaseWorker selectCaseWorker(Scanner scanner, HashMap<String, String> colors) {
        List<Staff> staffMembers = Staff.getAllStaff();
        System.out.println("\nAvailable Caseworkers:");
        System.out.println(Supervisor.getHeader(colors));

        int displayIndex = 1;
        List<CaseWorker> caseworkers = new ArrayList<>();
        for (Staff staff : staffMembers) {
            if (staff instanceof CaseWorker) {
                System.out.printf("%d. %s", displayIndex, staff.toString());
                caseworkers.add((CaseWorker) staff);
                displayIndex++;
            }
        }

        System.out.print("Select a caseworker by number: ");
        int caseworkerChoice = scanner.nextInt();
        scanner.nextLine();

        if (caseworkerChoice < 1 || caseworkerChoice > caseworkers.size()) {
            return null;
        }

        return caseworkers.get(caseworkerChoice - 1);
    }

    public void viewAssignedResidents(HashMap<String, String> colors) {
        List<Resident> residents = Resident.loadResidents(colors);
        System.out.println("\nAssigned Residents:");
        System.out.println(Resident.getHeader(colors));

        boolean hasAssignedResidents = false;

        for (Resident resident : residents) {
            if (resident.getAssignedTo() != null && !resident.getAssignedTo().equals("None")) {
                System.out.println(resident.toString());
                hasAssignedResidents = true;
            }
        }

        if (!hasAssignedResidents) {
            System.out.println(colors.get("RED") + "No residents are currently assigned to any caseworkers." + colors.get("RESET"));
        }
    }
}