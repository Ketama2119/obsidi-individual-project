package emergenceshelter.management.user;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Scanner;

public abstract class Staff extends Personnel {

    protected final static String filePath = "./file/staff.csv";
    public boolean isVerified;

    public abstract void viewAssignedResidents(HashMap<String, String> colors);
    public abstract void actionMenu(Scanner scanner, HashMap<String, String> colors);

    public Staff(String firstName, String lastName, String email, boolean isVerified, String password) {
        super(firstName, lastName, email, password);
        this.isVerified = isVerified;
    }

    public List<String> staffToList() {
        List<String> list = new ArrayList<>();
        list.add(this.firstName);
        list.add(this.lastName);
        list.add(this.email);
        list.add(Boolean.toString(isVerified));
        list.add(this.password);
        list.add(this.getClass().getSimpleName());
        return list;
    }

    public String getPassword() {
        return this.password;
    }

    public static List<Staff> getAllStaff(HashMap<String, String> colors) {
        List<Staff> staffs = new ArrayList<>();
        try {
            List<List<String>> rowData = rw.readCSV(Staff.filePath);
            for (List<String> row : rowData) {
                String role = row.get(5);
                if (role.equals("Supervisor")) {
                    staffs.add(new Supervisor(row.get(0), row.get(1), row.get(2), Boolean.parseBoolean(row.get(3)), row.get(4)));
                } else if (role.equals("CaseWorker")) {
                    staffs.add(new CaseWorker(row.get(0), row.get(1), row.get(2), Boolean.parseBoolean(row.get(3)), row.get(4)));
                }
            }
            System.out.println(colors.get("GREEN") + "Staff data loaded successfully." + colors.get("RESET"));
            return staffs;
        } catch (IOException e) {
            System.out.println(colors.get("RED") + "Error loading staff data from file." + colors.get("RESET"));
            e.printStackTrace();
            return null;
        }
    }

    public static void signUpStaff(Scanner scanner, HashMap<String, String> colors) {
        System.out.print("Enter first name: ");
        String firstName = scanner.nextLine();

        System.out.print("Enter last name: ");
        String lastName = scanner.nextLine();

        System.out.print("Enter email: ");
        String email = scanner.nextLine();

        System.out.print("Enter role (1. Supervisor, 2. Caseworker): ");
        String role = scanner.nextLine();

        System.out.print("Enter new password: ");
        String password = scanner.nextLine();

        Staff newStaff = null;
        if (role.equals("1")) {
            newStaff = new Supervisor(firstName, lastName, email, false, password);
        } else if (role.equals("2")) {
            newStaff = new CaseWorker(firstName, lastName, email, false, password);
        } else {
            System.out.println(colors.get("RED") + "Invalid role selected!" + colors.get("RESET"));
            return;
        }

        if (newStaff.addToDatabase(colors)) {
            System.out.println(colors.get("GREEN") + "\nUser added successfully! Please wait until approved by Admin." + colors.get("RESET"));
        } else {
            System.out.println(colors.get("RED") + "Error adding user to database." + colors.get("RESET"));
        }
    }

    public boolean addToDatabase(HashMap<String, String> colors) {
        List<String> line = this.staffToList();
        try {
            rw.appendToCSV(Staff.filePath, line);
            System.out.println(colors.get("GREEN") + "Data added to database successfully." + colors.get("RESET"));
            return true;
        } catch (IOException e) {
            System.out.println(colors.get("RED") + "Error writing data to file." + colors.get("RESET"));
            e.printStackTrace();
            return false;
        }
    }

    @Override
    public String toString() {
        return String.format("| %-15s  %-30s  %-12s  %-10s |\n",
            getFirstName() + " " + getLastName(),
            getEmail(),
            Boolean.toString(isVerified),
            getClass().getSimpleName()
        );
    }

    public static String getHeader(HashMap<String, String> colors) {
        return colors.get("GREEN") + String.format("| %-15s | %-30s | %-12s | %-10s |\n",
            "Name", "Email", "Verified", "Role") + colors.get("RESET");
    }
}